/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface WildlifeDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTO_VALIDATION_PERIOD"
      | "DAO_FEE"
      | "MAX_DONATION"
      | "MIN_DONATION"
      | "MIN_VOTE_POWER"
      | "VOTE_COST"
      | "VOTING_PERIOD"
      | "addValidator"
      | "calculateVoteCost"
      | "checkAndAutoValidate"
      | "donate"
      | "exchangeRate"
      | "getProjectByProposalId"
      | "getProjectVotes"
      | "getProposalStatus"
      | "hasVoted"
      | "minValidationsRequired"
      | "owner"
      | "projectCount"
      | "projects"
      | "proposalIdToProjectId"
      | "quadraticContribute"
      | "rejectProject"
      | "removeValidator"
      | "renounceOwnership"
      | "submitProject"
      | "totalValueLocked"
      | "totalWLD"
      | "transferOwnership"
      | "validateProject"
      | "validators"
      | "voteOnProject"
      | "wldToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DonationReceived"
      | "OwnershipTransferred"
      | "ProjectContribution"
      | "ProjectStatusChanged"
      | "ProjectStatusUpdated"
      | "ProjectSubmitted"
      | "ProjectValidated"
      | "ProposalSubmitted"
      | "ValidatorAdded"
      | "ValidatorRemoved"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUTO_VALIDATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAO_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_DONATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DONATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTE_POWER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VOTE_COST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVoteCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndAutoValidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectByProposalId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minValidationsRequired",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalIdToProjectId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "quadraticContribute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitProject",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalWLD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnProject",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "wldToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AUTO_VALIDATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAO_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DONATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DONATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTE_POWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VOTE_COST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVoteCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAndAutoValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectByProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minValidationsRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIdToProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quadraticContribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalWLD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wldToken", data: BytesLike): Result;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [
    donor: AddressLike,
    usdAmount: BigNumberish,
    wldMinted: BigNumberish,
    daoFeeAmount: BigNumberish
  ];
  export type OutputTuple = [
    donor: string,
    usdAmount: bigint,
    wldMinted: bigint,
    daoFeeAmount: bigint
  ];
  export interface OutputObject {
    donor: string;
    usdAmount: bigint;
    wldMinted: bigint;
    daoFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectContributionEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    contributor: AddressLike,
    amount: BigNumberish,
    tokensBurned: BigNumberish,
    totalFunding: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    contributor: string,
    amount: bigint,
    tokensBurned: bigint,
    totalFunding: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    contributor: string;
    amount: bigint;
    tokensBurned: bigint;
    totalFunding: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectStatusChangedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectStatusUpdatedEvent {
  export type InputTuple = [projectId: BigNumberish, newStatus: BigNumberish];
  export type OutputTuple = [projectId: bigint, newStatus: bigint];
  export interface OutputObject {
    projectId: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectSubmittedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    proposer: AddressLike,
    title: string,
    fundingRequired: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    proposer: string,
    title: string,
    fundingRequired: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    proposer: string;
    title: string;
    fundingRequired: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectValidatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    validator: AddressLike,
    currentValidations: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    validator: string,
    currentValidations: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    validator: string;
    currentValidations: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalSubmittedEvent {
  export type InputTuple = [
    proposalId: string,
    projectId: BigNumberish,
    submitter: AddressLike,
    title: string,
    fundingRequired: BigNumberish,
    status: string
  ];
  export type OutputTuple = [
    proposalId: string,
    projectId: bigint,
    submitter: string,
    title: string,
    fundingRequired: bigint,
    status: string
  ];
  export interface OutputObject {
    proposalId: string;
    projectId: bigint;
    submitter: string;
    title: string;
    fundingRequired: bigint;
    status: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    voter: AddressLike,
    support: boolean,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    voter: string,
    support: boolean,
    votingPower: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    voter: string;
    support: boolean;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WildlifeDAO extends BaseContract {
  connect(runner?: ContractRunner | null): WildlifeDAO;
  waitForDeployment(): Promise<this>;

  interface: WildlifeDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTO_VALIDATION_PERIOD: TypedContractMethod<[], [bigint], "view">;

  DAO_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_DONATION: TypedContractMethod<[], [bigint], "view">;

  MIN_DONATION: TypedContractMethod<[], [bigint], "view">;

  MIN_VOTE_POWER: TypedContractMethod<[], [bigint], "view">;

  VOTE_COST: TypedContractMethod<[], [bigint], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  calculateVoteCost: TypedContractMethod<
    [numVotes: BigNumberish],
    [bigint],
    "view"
  >;

  checkAndAutoValidate: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  donate: TypedContractMethod<
    [_usdAmount: BigNumberish, _recipient: AddressLike],
    [void],
    "payable"
  >;

  exchangeRate: TypedContractMethod<[], [bigint], "view">;

  getProjectByProposalId: TypedContractMethod<
    [proposalId: string],
    [
      [bigint, string, string, bigint] & {
        projectId: bigint;
        title: string;
        proposer: string;
        status: bigint;
      }
    ],
    "view"
  >;

  getProjectVotes: TypedContractMethod<
    [projectId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        forVotes: bigint;
        againstVotes: bigint;
        votingEndTime: bigint;
      }
    ],
    "view"
  >;

  getProposalStatus: TypedContractMethod<
    [proposalId: string],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        projectId: bigint;
        status: bigint;
        submissionTime: bigint;
        votingStartTime: bigint;
        votingEndTime: bigint;
      }
    ],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [projectId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  minValidationsRequired: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  projectCount: TypedContractMethod<[], [bigint], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        title: string;
        description: string;
        proposer: string;
        fundingRequired: bigint;
        fundingReceived: bigint;
        validationCount: bigint;
        status: bigint;
        submissionTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        votingStartTime: bigint;
        votingEndTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  proposalIdToProjectId: TypedContractMethod<[arg0: string], [bigint], "view">;

  quadraticContribute: TypedContractMethod<
    [projectId: BigNumberish, numVotes: BigNumberish],
    [void],
    "nonpayable"
  >;

  rejectProject: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitProject: TypedContractMethod<
    [
      proposalId: string,
      title: string,
      description: string,
      fundingRequired: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  totalWLD: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validateProject: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  validators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  voteOnProject: TypedContractMethod<
    [projectId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  wldToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTO_VALIDATION_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAO_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DONATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DONATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VOTE_POWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTE_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateVoteCost"
  ): TypedContractMethod<[numVotes: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkAndAutoValidate"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [_usdAmount: BigNumberish, _recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProjectByProposalId"
  ): TypedContractMethod<
    [proposalId: string],
    [
      [bigint, string, string, bigint] & {
        projectId: bigint;
        title: string;
        proposer: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectVotes"
  ): TypedContractMethod<
    [projectId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        forVotes: bigint;
        againstVotes: bigint;
        votingEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalStatus"
  ): TypedContractMethod<
    [proposalId: string],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        projectId: bigint;
        status: bigint;
        submissionTime: bigint;
        votingStartTime: bigint;
        votingEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [projectId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "minValidationsRequired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        title: string;
        description: string;
        proposer: string;
        fundingRequired: bigint;
        fundingReceived: bigint;
        validationCount: bigint;
        status: bigint;
        submissionTime: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        votingStartTime: bigint;
        votingEndTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalIdToProjectId"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "quadraticContribute"
  ): TypedContractMethod<
    [projectId: BigNumberish, numVotes: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectProject"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitProject"
  ): TypedContractMethod<
    [
      proposalId: string,
      title: string,
      description: string,
      fundingRequired: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateProject"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "voteOnProject"
  ): TypedContractMethod<
    [projectId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wldToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectContribution"
  ): TypedContractEvent<
    ProjectContributionEvent.InputTuple,
    ProjectContributionEvent.OutputTuple,
    ProjectContributionEvent.OutputObject
  >;
  getEvent(
    key: "ProjectStatusChanged"
  ): TypedContractEvent<
    ProjectStatusChangedEvent.InputTuple,
    ProjectStatusChangedEvent.OutputTuple,
    ProjectStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectStatusUpdated"
  ): TypedContractEvent<
    ProjectStatusUpdatedEvent.InputTuple,
    ProjectStatusUpdatedEvent.OutputTuple,
    ProjectStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectSubmitted"
  ): TypedContractEvent<
    ProjectSubmittedEvent.InputTuple,
    ProjectSubmittedEvent.OutputTuple,
    ProjectSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectValidated"
  ): TypedContractEvent<
    ProjectValidatedEvent.InputTuple,
    ProjectValidatedEvent.OutputTuple,
    ProjectValidatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalSubmitted"
  ): TypedContractEvent<
    ProposalSubmittedEvent.InputTuple,
    ProposalSubmittedEvent.OutputTuple,
    ProposalSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "DonationReceived(address,uint256,uint256,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectContribution(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      ProjectContributionEvent.InputTuple,
      ProjectContributionEvent.OutputTuple,
      ProjectContributionEvent.OutputObject
    >;
    ProjectContribution: TypedContractEvent<
      ProjectContributionEvent.InputTuple,
      ProjectContributionEvent.OutputTuple,
      ProjectContributionEvent.OutputObject
    >;

    "ProjectStatusChanged(uint256,uint8,uint8)": TypedContractEvent<
      ProjectStatusChangedEvent.InputTuple,
      ProjectStatusChangedEvent.OutputTuple,
      ProjectStatusChangedEvent.OutputObject
    >;
    ProjectStatusChanged: TypedContractEvent<
      ProjectStatusChangedEvent.InputTuple,
      ProjectStatusChangedEvent.OutputTuple,
      ProjectStatusChangedEvent.OutputObject
    >;

    "ProjectStatusUpdated(uint256,uint8)": TypedContractEvent<
      ProjectStatusUpdatedEvent.InputTuple,
      ProjectStatusUpdatedEvent.OutputTuple,
      ProjectStatusUpdatedEvent.OutputObject
    >;
    ProjectStatusUpdated: TypedContractEvent<
      ProjectStatusUpdatedEvent.InputTuple,
      ProjectStatusUpdatedEvent.OutputTuple,
      ProjectStatusUpdatedEvent.OutputObject
    >;

    "ProjectSubmitted(uint256,address,string,uint256)": TypedContractEvent<
      ProjectSubmittedEvent.InputTuple,
      ProjectSubmittedEvent.OutputTuple,
      ProjectSubmittedEvent.OutputObject
    >;
    ProjectSubmitted: TypedContractEvent<
      ProjectSubmittedEvent.InputTuple,
      ProjectSubmittedEvent.OutputTuple,
      ProjectSubmittedEvent.OutputObject
    >;

    "ProjectValidated(uint256,address,uint256)": TypedContractEvent<
      ProjectValidatedEvent.InputTuple,
      ProjectValidatedEvent.OutputTuple,
      ProjectValidatedEvent.OutputObject
    >;
    ProjectValidated: TypedContractEvent<
      ProjectValidatedEvent.InputTuple,
      ProjectValidatedEvent.OutputTuple,
      ProjectValidatedEvent.OutputObject
    >;

    "ProposalSubmitted(string,uint256,address,string,uint256,string)": TypedContractEvent<
      ProposalSubmittedEvent.InputTuple,
      ProposalSubmittedEvent.OutputTuple,
      ProposalSubmittedEvent.OutputObject
    >;
    ProposalSubmitted: TypedContractEvent<
      ProposalSubmittedEvent.InputTuple,
      ProposalSubmittedEvent.OutputTuple,
      ProposalSubmittedEvent.OutputObject
    >;

    "ValidatorAdded(address)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorRemoved(address)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
